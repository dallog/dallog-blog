{"componentChunkName":"component---src-templates-post-jsx","path":"/query-invalidation/","result":{"data":{"site":{"siteMetadata":{"title":"dal.log"}},"markdownRemark":{"id":"1e93cfc2-f4ae-5ffb-b7d6-1980189ab0b2","excerpt":"이 글은 우테코 달록팀 크루 나인이 작성했습니다. React-Query의 캐싱개념은 stale과 cacheTime을 통해 이루어집니다. Stale 사전적 의미로 '신선하지 않은' 입니다. react query는 기본적으로 캐싱된 데이터를 stale하다고 생각합니다. react query에서는 stale time의 default이 0입니다. (즉, 캐싱이 …","html":"<blockquote>\n<p>이 글은 우테코 달록팀 크루 <a href=\"https://github.com/jhy979\">나인</a>이 작성했습니다.</p>\n</blockquote>\n<p>React-Query의 캐싱개념은 stale과 cacheTime을 통해 이루어집니다.</p>\n<h2>Stale</h2>\n<blockquote>\n<p>사전적 의미로 '신선하지 않은' 입니다. react query는 기본적으로 캐싱된 데이터를 stale하다고 생각합니다.</p>\n</blockquote>\n<p>react query에서는 stale time의 default이 0입니다. (즉, 캐싱이 되지 않는다고 볼 수 있겠죠?)</p>\n<h3>staleTime</h3>\n<blockquote>\n<p>데이터가 fresh한 상태에서 stale한 상태로 변하는 시간입니다.</p>\n</blockquote>\n<ul>\n<li>fresh 상태일때는 쿼리 인스턴스가 새롭게 mount 되어도 fetch가 일어나지 않습니다. </li>\n<li>데이터가 fetch 되고 나서 staleTime이 지나지 않았다면 unmount 후 mount 되어도 fetch가 일어나지 않습니다.</li>\n</ul>\n<h3>cacheTime</h3>\n<blockquote>\n<p>데이터가 inactive 상태일 때 캐싱된 상태로 남아있는 시간입니다.</p>\n</blockquote>\n<ul>\n<li>쿼리 인스턴스가 unmount 되면 데이터는 inactive 상태로 변경되며, 캐시는 cacheTime만큼 유지됩니다.</li>\n<li>cacheTime은 staleTime과 관계없이, 무조건 <code class=\"language-text\">inactive된 시점</code>을 기준으로 캐싱을 결정합니다.</li>\n</ul>\n<hr>\n<h2>달록에서의 데이터 최신화</h2>\n<blockquote>\n<p>달록은 일정, 카테고리, 구독 등의 작업으로 인해 데이터의 변화가 잦은 어플리케이션입니다. 따라서 저희 팀은 staleTime을 지정해주지 않았습니다.</p>\n</blockquote>\n<p>그렇다면 stale한 데이터는 늘 최신화가 필요할 것입니다.</p>\n<p>그래서 저는 매번 새로운 데이터가 필요할 때마다 <code class=\"language-text\">useQuery의 refetch</code>를 강제적으로 실행시켜주는 방식을 생각했었습니다.</p>\n<p>예를 들면 일정을 추가(post)한 후에 일정을 다시 조회(get)하는 경우가 있을겁니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jhy979/post/287f66a2-8b7e-49c8-b623-c05a491db600/image.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// refetch 함수를 부모로 부터 주입 받아야 합니다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ScheduleAddModal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> closeModal<span class=\"token punctuation\">,</span> refetch <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ScheduleAddModalProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSuccessPostSchedule</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">refetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>😢 하지만 이 방식이 우아하지는 않더라구요. </p>\n<p>만약 부모와 자식 간의 props전달이 아니라 조부모와 자식 간의 props 전달이라면 어떨까요? 벌써 머리가 아파옵니다. (props hell)</p>\n<h2>Query Invalidation 도입</h2>\n<p>🤔 다른 방법이 있을텐데.. 어떤 방법이 있을까? 고민하며 공식문서를 읽던 도중 <code class=\"language-text\">Query Invalidation</code>을 발견하게 되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Invalidate every query in the cache</span>\nqueryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Invalidate every query with a key that starts with `todos`</span>\nqueryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>The QueryClient has an invalidateQueries method that lets you intelligently mark queries as stale and potentially refetch them too!</p>\n</blockquote>\n<p>❗ 캐싱키로 관련된 stale 쿼리들을 체크하고 refetch할 수 있는 메서드가 존재했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ScheduleAddModal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> closeModal <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ScheduleAddModalProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSuccessPostSchedule</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 일정 post 성공 시 데이터 최신화를 invalidateQueries메서드를 통해 수행합니다.</span>\n    queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CACHE_KEY</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCHEDULES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>💪 이로써 useQuery의 refetch함수를 넘겨줄 필요없이 어디서든 캐싱키로 fresh한 데이터를 보장할 수 있게 되었습니다.</p>\n<h4>참고자료</h4>\n<p><a href=\"https://tanstack.com/query/v4/docs/guides/query-invalidation\">https://tanstack.com/query/v4/docs/guides/query-invalidation</a></p>","frontmatter":{"title":"React-Query에서의 데이터 최신화 (Query Invalidation)","date":"August 01, 2022","update":null,"tags":["react","react-query"],"series":null},"fields":{"slug":"/query-invalidation/","readingTime":{"minutes":1.66}}},"seriesList":{"edges":[{"node":{"id":"76f78cb8-db6c-5554-981a-6aea792bd3da","fields":{"slug":"/appearance-background-of-jpa/"},"frontmatter":{"title":"JPA 등장배경"}}},{"node":{"id":"c1266cda-3c7d-585d-8f24-ac46ae0d2c3c","fields":{"slug":"/intellij-final-keyword/"},"frontmatter":{"title":"IntelliJ에서 메소드 추출한 메소드의 파라미터에 final 키워드 자동 추가하기"}}},{"node":{"id":"b07b4858-95f4-5939-8940-aa1250687abd","fields":{"slug":"/git-branch-strategy/"},"frontmatter":{"title":"달록팀의 git 브랜치 전략을 소개합니다."}}},{"node":{"id":"332ae3b0-7133-54e9-ba46-d24f2a02fe6e","fields":{"slug":"/infinite-scroll/"},"frontmatter":{"title":"React에서 무한 스크롤 구현하기"}}},{"node":{"id":"f0db7de2-e0b0-5446-b8a5-279c030cb6a8","fields":{"slug":"/package-structure/"},"frontmatter":{"title":"달록에 적절한 패키지 구조 고민하기"}}},{"node":{"id":"901c4725-fcf0-5869-a936-7abd5c299552","fields":{"slug":"/data-jpa-slice-page/"},"frontmatter":{"title":"Spring Data JPA의 Slice & Page"}}},{"node":{"id":"76b463c4-bb51-5a29-82df-deae0a989406","fields":{"slug":"/data-jpa-auditing/"},"frontmatter":{"title":"Spring Data JPA의 Auditing"}}},{"node":{"id":"1e0b47dd-2623-5427-a3e9-30357be3be2f","fields":{"slug":"/separated-interface/"},"frontmatter":{"title":"외부와 의존성 분리하기"}}},{"node":{"id":"f5b486f2-7f2e-5907-9380-8646b727011b","fields":{"slug":"/apply-rest-docs/"},"frontmatter":{"title":"MockMvc를 사용한 Spring RestDocs"}}},{"node":{"id":"6c7a3b90-ff64-58fd-8199-cb65a649efc4","fields":{"slug":"/properties-to-object/"},"frontmatter":{"title":"properties 객체로 다루기"}}},{"node":{"id":"bc4c1cf5-0f26-5035-b972-2e958c20d98d","fields":{"slug":"/test-fixture-constant/"},"frontmatter":{"title":"테스트에서 Entity 객체를 상수로 두면 안 되는 이유"}}},{"node":{"id":"ba61f03e-dcc7-58a5-b6bb-77eff9c36918","fields":{"slug":"/what_is_nginx/"},"frontmatter":{"title":"NGINX 란?"}}},{"node":{"id":"5a7c6740-32e0-5d7e-b91c-37ca4ae42fc7","fields":{"slug":"/ssl_protocol/"},"frontmatter":{"title":"SSL을 통한 HTTPS통신 과정"}}},{"node":{"id":"76099a1d-7977-5447-9e88-4036bd793e33","fields":{"slug":"/integration-test-slice-test/"},"frontmatter":{"title":"통합 테스트와 슬라이스 테스트"}}},{"node":{"id":"1e93cfc2-f4ae-5ffb-b7d6-1980189ab0b2","fields":{"slug":"/query-invalidation/"},"frontmatter":{"title":"React-Query에서의 데이터 최신화 (Query Invalidation)"}}},{"node":{"id":"03f33659-afb8-5c11-adfa-2c2e9811166f","fields":{"slug":"/seperate-components/"},"frontmatter":{"title":"컴포넌트 분리 기준"}}}]},"previous":{"fields":{"slug":"/integration-test-slice-test/"},"frontmatter":{"title":"통합 테스트와 슬라이스 테스트"}},"next":{"fields":{"slug":"/seperate-components/"},"frontmatter":{"title":"컴포넌트 분리 기준"}}},"pageContext":{"id":"1e93cfc2-f4ae-5ffb-b7d6-1980189ab0b2","series":null,"previousPostId":"76099a1d-7977-5447-9e88-4036bd793e33","nextPostId":"03f33659-afb8-5c11-adfa-2c2e9811166f"}},"staticQueryHashes":[]}