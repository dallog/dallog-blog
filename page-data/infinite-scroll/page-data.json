{"componentChunkName":"component---src-templates-post-jsx","path":"/infinite-scroll/","result":{"data":{"site":{"siteMetadata":{"title":"dal.log"}},"markdownRemark":{"id":"170a6efb-2c64-58f4-9c54-c307d279a1fb","excerpt":"이 글은 우테코 달록팀 크루 나인이 작성했습니다. 🎯 \"무한 스크롤을 구현해보세요!\" 어떻게 구현하실 건가요? 무한 스크롤을 처음 마주했을때 🤔 저는 처음 무한 스크롤을 구현할 때 다음과 같은 방식을 사용했어요. scroll event 사용하기 우테코 레벨1 유튜브 미션 처음 제가 무한 스크롤을 구현했던 방법은 다음과 같습니다. 바로 스크롤 이벤트와 of…","html":"<blockquote>\n<p>이 글은 우테코 달록팀 크루 <a href=\"https://github.com/jhy979\">나인</a>이 작성했습니다.</p>\n</blockquote>\n<p>🎯 \"무한 스크롤을 구현해보세요!\"</p>\n<p>어떻게 구현하실 건가요?</p>\n<h2>무한 스크롤을 처음 마주했을때</h2>\n<p>🤔 저는 처음 무한 스크롤을 구현할 때 다음과 같은 방식을 사용했어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. scroll 이벤트를 감지한다.\n\n2. 현재 스크롤 영역의 `위치를 계산`한다.\n\n3. 영역 계산을 통해 페이지 아래에 위치하면 API 요청을 진행한다.\n\n4. 받아온 데이터를 추가하여 다시 렌더링한다.\n\n5. 무한 반복</code></pre></div>\n<hr>\n<h2>scroll event 사용하기</h2>\n<p><a href=\"https://github.dev/jhy979/javascript-youtube-classroom/tree/jhy979-step2\">우테코 레벨1 유튜브 미션</a></p>\n<p>처음 제가 무한 스크롤을 구현했던 방법은 다음과 같습니다.</p>\n<p>바로 스크롤 이벤트와 offset을 이용한 방식이죠!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">scrollToBottom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> isScrollBottom <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$videoList<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$videoList<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">&lt;=</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$videoList<span class=\"token punctuation\">.</span>offsetHeight <span class=\"token operator\">+</span> <span class=\"token constant\">EVENT</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCROLL</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OFFSET</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isScrollBottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$searchInput<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>메서드 네이밍을 통해서도 알 수 있듯이, 화면 하단까지 내려갔을 경우 (offset 정도를 감안하여) 인자로 받은 함수를 실행시켜주었습니다.</p>\n<p>아 물론, 스크롤 이벤트는 워낙 많이 발생하기 때문에 throttle을 걸어주었습니다. (이건 필수죠)</p>\n<p>😢 하지만, <code class=\"language-text\">documentElement.scrollTop</code>, <code class=\"language-text\">documentElement.scrollHeight</code>, <code class=\"language-text\">documentElement.offsetHeight</code>는 리플로우(Reflow)가 발생합니다.</p>\n<p>확실히 비효율적이겠죠!</p>\n<hr>\n<h2>IntersectionObserver 사용하기</h2>\n<p>달록에서는 무한 스크롤을 구현할 때 <a href=\"https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API\">Intersection Observer</a>를 사용했습니다.</p>\n<blockquote>\n<p>Intersection Observer는 쉽게 말해 지정한 대상이 화면에 보이는지 감시하고 판단하는 도구입니다.</p>\n</blockquote>\n<p>브라우저 Viewport와 Target으로 설정한 요소의 교차점을 관찰하여 그 Target이 Viewport에 포함되는지 구별하는 기능을 제공합니다.</p>\n<img src='https://velog.velcdn.com/images/jhy979/post/19500233-65fc-4ba9-b421-81516700c00b/image.png'>\n<h3>useIntersect 커스텀훅</h3>\n<blockquote>\n<p>가장 먼저 useIntersect 라는 커스텀훅을 제작했습니다.</p>\n</blockquote>\n<p>이 커스텀훅은 <code class=\"language-text\">인자로 intersect시 실행할 함수</code>를 받고 <code class=\"language-text\">ref를 제공</code>하여 관찰할 대상을 지정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IntersectHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  entry<span class=\"token operator\">:</span> IntersectionObserverEntry<span class=\"token punctuation\">,</span>\n  observer<span class=\"token operator\">:</span> IntersectionObserver\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 인자로 onIntersect와 options를 받습니다.</span>\n<span class=\"token comment\">// onIntersect는 intersect 발생 시 실행하고 싶은 함수입니다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useIntersect</span><span class=\"token punctuation\">(</span>\n  onIntersect<span class=\"token operator\">:</span> IntersectHandler<span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> IntersectionObserverInit\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 관찰하고 싶은 친구를 잡기 위해 ref를 만들어주세요.</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// intersect 시 실행할 함수를 만들어줍시다.</span>\n  <span class=\"token keyword\">const</span> callback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>entries<span class=\"token operator\">:</span> IntersectionObserverEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> observer<span class=\"token operator\">:</span> IntersectionObserver<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">onIntersect</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">,</span> observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>onIntersect<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 🔨 옵저버에게 일을 시켜봅시다.</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 우리가 관찰하고 싶은 친구가 없으면 그냥 return 해버려요.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 관찰할 대상이 있으면 옵저버 데꼬 와야죠!</span>\n    <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 이 옵저버한테 감시를 시킵시다.</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 할 일 끝나면 고생한 옵저버도 쉬게 해줍시다!</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ref<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useIntersect<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>실제 사용</h3>\n<p>useIntersect 커스텀훅을 잘 만들었으니 이제 이 커스텀훅을 무한 스크롤에 사용해 봅시다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jhy979/post/4643727c-852d-4f23-ab4f-44ce79e2e3b2/image.gif\"></p>\n<p>다음은 카테고리 목록을 계속 불러와 리스트를 보여주는 컴포넌트입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CategoryList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  categoryList<span class=\"token punctuation\">,</span>\n  getMoreCategories<span class=\"token punctuation\">,</span>\n  hasNextPage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> CategoryListProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// useIntersect 커스텀훅의 인자로 (교차 시) 실행할 함수를 넣어줍시다.</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useIntersect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    hasNextPage <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">getMoreCategories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">css</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>categoryTable<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">css</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>categoryTableHeader<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> 생성 날짜 </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> 카테고리 이름 </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>categoryList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">category</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>category<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">category</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>category<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      // 페이지 하단까지 내리면 이 친구가 등장하여 옵저버에게 감지될 거예요.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">css</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>intersectTarget<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>💪 무한 스크롤함에 따라 props로 받아오는 categoryList가 길어지게 될텐데요, 다행히 React에서는 key값으로 변경 여부를 확인하기 때문에 새롭게 추가된 리스트들만 리렌더링해주었습니다.</p>","frontmatter":{"title":"React에서 무한 스크롤 구현하기","date":"July 18, 2022","update":null,"tags":["react"],"series":null},"fields":{"slug":"/infinite-scroll/","readingTime":{"minutes":2.295}}},"seriesList":{"edges":[{"node":{"id":"082241f5-a95e-596e-a6e5-3ddc8602e007","fields":{"slug":"/apply-rest-docs/"},"frontmatter":{"title":"MockMvc를 사용한 Spring RestDocs"}}},{"node":{"id":"1547ad5d-d560-50c7-8eb3-c4112d5666ab","fields":{"slug":"/appearance-background-of-jpa/"},"frontmatter":{"title":"JPA 등장배경"}}},{"node":{"id":"033a271f-a26c-53d6-8065-7b62495bf897","fields":{"slug":"/intellij-final-keyword/"},"frontmatter":{"title":"IntelliJ에서 메소드 추출한 메소드의 파라미터에 final 키워드 자동 추가하기"}}},{"node":{"id":"c42fd84c-0b8c-50d0-a3f9-84a608cb7e0d","fields":{"slug":"/git-branch-strategy/"},"frontmatter":{"title":"달록팀의 git 브랜치 전략을 소개합니다."}}},{"node":{"id":"170a6efb-2c64-58f4-9c54-c307d279a1fb","fields":{"slug":"/infinite-scroll/"},"frontmatter":{"title":"React에서 무한 스크롤 구현하기"}}},{"node":{"id":"c2b3cd35-2045-5e3d-a02b-3b2ff229c11d","fields":{"slug":"/package-structure/"},"frontmatter":{"title":"달록에 적절한 패키지 구조 고민하기"}}},{"node":{"id":"c25cf6cb-9f56-58b1-bb1a-7a96021a2078","fields":{"slug":"/data-jpa-slice-page/"},"frontmatter":{"title":"Spring Data JPA의 Slice & Page"}}},{"node":{"id":"ce017151-2154-5e38-ab34-e8830aec784b","fields":{"slug":"/data-jpa-auditing/"},"frontmatter":{"title":"Spring Data JPA의 Auditing"}}},{"node":{"id":"bda33ac6-a772-5d1b-9d7a-4fbd31d9dc87","fields":{"slug":"/separated-interface/"},"frontmatter":{"title":"외부와 의존성 분리하기"}}}]},"previous":{"fields":{"slug":"/git-branch-strategy/"},"frontmatter":{"title":"달록팀의 git 브랜치 전략을 소개합니다."}},"next":{"fields":{"slug":"/package-structure/"},"frontmatter":{"title":"달록에 적절한 패키지 구조 고민하기"}}},"pageContext":{"id":"170a6efb-2c64-58f4-9c54-c307d279a1fb","series":null,"previousPostId":"c42fd84c-0b8c-50d0-a3f9-84a608cb7e0d","nextPostId":"c2b3cd35-2045-5e3d-a02b-3b2ff229c11d"}},"staticQueryHashes":[]}