{"componentChunkName":"component---src-templates-post-jsx","path":"/apply-rest-docs/","result":{"data":{"site":{"siteMetadata":{"title":"dal.log"}},"markdownRemark":{"id":"082241f5-a95e-596e-a6e5-3ddc8602e007","excerpt":"이 글은 우테코 달록팀 크루 리버가 작성했습니다. Rest Docs Spring Rest Docs는 테스트 코드 기반으로 자동으로 Rest API 문서를 작성 할 수 있도록 도와주는 프레임 워크이다. Rest Docs와 Swagger 자바 문서 자동화에는 주로 Rest Docs와 Swagger가 사용된다.\n각 자동화 프레임 워크의 장단점을 살펴보자.\n S…","html":"<blockquote>\n<p>이 글은 우테코 달록팀 크루 <a href=\"https://github.com/gudonghee2000\">리버</a>가 작성했습니다.</p>\n</blockquote>\n<h2>Rest Docs</h2>\n<p>Spring Rest Docs는 테스트 코드 기반으로 자동으로 Rest API 문서를 작성 할 수 있도록 도와주는 프레임 워크이다.</p>\n<h2>Rest Docs와 Swagger</h2>\n<p>자바 문서 자동화에는 주로 Rest Docs와 Swagger가 사용된다.\n각 자동화 프레임 워크의 장단점을 살펴보자.\n<img src=\"https://velog.velcdn.com/images/gudonghee2000/post/ffc0e7eb-3190-43ca-9a85-16f9b8bbbb4e/image.JPG\"></p>\n<p>Swagger는 API 문서의 작성을 위해 프로덕션 코드에 추가적인 코드를 작성해야한다.\n그래서 Swagger의 사용은 프로덕션 코드의 가독성을 떨어트린다고 생각한다.</p>\n<p>반대로, Spring Rest Docs는 테스트 코드에 의존적이기 때문에 Spring Rest Docs를 사용하는것이 좋다고 생각한다.</p>\n<h2>MockMvc vs Rest Assured</h2>\n<p>Spring Rest Docs를 사용하여 문서를 작성 하려면 테스트 코드가 필요하다.\n테스트 코드를 작성 할 때, 대표적으로 MockMvc와 Rest Assured를 사용한다.</p>\n<p>MockMvc를 사용하면 <code class=\"language-text\">@WebMvcTest</code>로 테스트 할 수 있다.\n그래서 Controller Layer만으로 테스트 하기 때문에 테스트 속도가 빠르다.</p>\n<p>반면, RestAssured는 <code class=\"language-text\">@SpringBootTest</code>로 수행해야한다. 그러면 전체 어플리케이션 컨텍스트를 로드하여 빈을 주입하기에 테스트 속도가 느리다.\n하지만, 실제 객체를 통한 테스트가 가능하기 때문에 테스트의 신뢰성이 높다.</p>\n<p>통합 테스트, 인수 테스트의 경우 RestAssuerd가 좋을 수 있지만, 문서를 작성하기 위한 테스트에는 MockMvc가 더 적절하다고 생각한다.</p>\n<p><strong><em>💡 @WebMvcTest와 @SpringBootTest</em></strong>\n@WebMvcTest는 Application Context를 완전하게 Start하지 않고 Present Layer 관련 컴포넌트만 스캔하여 빈 등록한다.\n반면, @SpringBootTest의 경우 모든 빈을 로드하여 등록한다.</p>\n<h2>AsciiDoc</h2>\n<p>Spring Boot Rest Docs는 Asciidoc를 문서 번역을 위한 텍스트 프로세서로 사용한다.</p>\n<h2>Rest Docs API 문서 생성 매커니즘</h2>\n<p>우선, Rest Docs의 문서 생성 매커니즘을 살펴보자.</p>\n<ol>\n<li>MockMvc로 작성한 테스트 코드를 실행한다.</li>\n<li>\n<p>테스트가 통과하면 아래와 같이 <code class=\"language-text\">build/generated-snippets</code> 하위에 스니펫(문서조각)들이 생성된다.\n<img src=\"https://velog.velcdn.com/images/gudonghee2000/post/f4555336-cc43-4cc7-b7ca-8c1f903b2afd/image.png\"></p>\n<p><em>❗❗ gradle은 build/generated-snippets에 스니펫이 생성된다.</em></p>\n</li>\n<li><code class=\"language-text\">build/generated-snippets</code> 하위에 생성된 스니펫들을 묶어서 HTML 문서를 만들기 위해서는, gradle의 경우 아래와 같이<code class=\"language-text\">src/docs/asciidoc</code> 하위에 스니펫들을 묶은 adoc문서를 만든다.<img src=\"https://velog.velcdn.com/images/gudonghee2000/post/bc769cd9-2fd2-483d-8c65-a4885f628e37/image.png\"></li>\n<li>스니펫을 이용해서 <code class=\"language-text\">src/docs/asciidoc</code> 하위에 adoc 파일을 생성했다면, <code class=\"language-text\">./gradlew build</code> 명령어를 통해 빌드를 해준다.\n<img src=\"https://velog.velcdn.com/images/gudonghee2000/post/f1948f04-9742-4267-8d19-3d962097f129/image.png\">\n빌드가 완료되면 위와 같이 <code class=\"language-text\">resources - static - docs</code> 하위에 HTML 문서가 생성된다.</li>\n<li>\n<p>어플리케이션을 실행 한 후, <code class=\"language-text\">http://localhost:8080/docs/{HTML 파일명}</code> 을 웹브라우저에 검색하면 생성한 REST API 문서를 확인 할 수 있다.</p>\n<p><strong>❗❗ API문서 url은 코드를 통해 변경 가능하다.</strong></p>\n</li>\n</ol>\n<h3>❗유의할 점</h3>\n<p>resources - static - docs 하위의 HTML 파일은 실제로는 build.gradle의 설정파일에 따라서 위와같이 build - docs - asciidoc 하위의 HTML 파일을 복사해온 파일이다.\n<img src=\"https://velog.velcdn.com/images/gudonghee2000/post/7b70d45e-15a7-4278-9e3a-033370c2a600/image.png\"></p>\n<h3>아이디어</h3>\n<p>REST API 문서를 확인할 때, <code class=\"language-text\">http://localhost:8080/docs/{HTML 파일명}</code> 을 통해서 웹브라우저에 접근하지 않아도 확인하는 방법이 있다.\n<img src=\"https://velog.velcdn.com/images/gudonghee2000/post/8f5177d6-5ba0-4f3e-be3a-3cba37012c46/image.png\">\nAsciiDoc 플러그인을 설치하면 위와같이, 인텔리제이 상에서도 REST API 문서를 실시간으로 확인할수 있다. (✔설치 추천)</p>\n<h2>Rest Docs 사용을 위한 빌드파일 설정</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">plugins <span class=\"token punctuation\">{</span>\n    id <span class=\"token string\">'org.asciidoctor.jvm.convert'</span> version <span class=\"token string\">'3.3.2'</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\n\next <span class=\"token punctuation\">{</span>\n    snippetsDir <span class=\"token operator\">=</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">'build/generated-snippets'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span>\n\ntest <span class=\"token punctuation\">{</span>\n    outputs<span class=\"token punctuation\">.</span>dir snippetsDir <span class=\"token comment\">// 3</span>\n    <span class=\"token function\">useJUnitPlatform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconfigurations <span class=\"token punctuation\">{</span>\n    asciidoctorExtensions\n<span class=\"token punctuation\">}</span>\n\nasciidoctor <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 4</span>\n    configurations <span class=\"token string\">'asciidoctorExtensions'</span>\n    inputs<span class=\"token punctuation\">.</span>dir snippetsDir\n    dependsOn test\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    testImplementation <span class=\"token string\">'org.springframework.restdocs:spring-restdocs-mockmvc'</span> <span class=\"token comment\">// 5</span>\n    asciidoctorExtensions <span class=\"token string\">'org.springframework.restdocs:spring-restdocs-asciidoctor'</span> <span class=\"token comment\">// 6</span>\n<span class=\"token punctuation\">}</span>\n\ntask <span class=\"token function\">copyDocument</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token class-name\">Copy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 7</span>\n    dependsOn asciidoctor\n\n    from <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"build/docs/asciidoc\"</span><span class=\"token punctuation\">)</span>\n    into <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/main/resources/static/docs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nbootJar <span class=\"token punctuation\">{</span>\n    dependsOn copyDocument <span class=\"token comment\">// 8</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>gradle7부터 사용하는 플러그인으로 asciidoc 파일 변환, build 디렉토리에 복사하는 플러그인이다.</li>\n<li>생성된 스니펫을 저장할 위치를 정의한다. gradle은 <code class=\"language-text\">build/generated-snippets</code>에 스니펫이 생성된다.</li>\n<li>테스트 Task의 결과 아웃풋 디렉토리를 <code class=\"language-text\">build/generated-snippets</code>로 지정한다.</li>\n<li>asciidoctor Task가 사용할 인풋 디렉토리를 <code class=\"language-text\">build/generated-snippets</code>로 지정한다.\ndependsOn test로 문서가 작성되기 전에 테스트가 실행되도록 한다.</li>\n<li>MockMvc를 테스트에 사용하기 위한 의존성을 추가 해준다.</li>\n<li>일반 텍스트를 처리하고 HTML 파일을 생성하는 의존성을 추가 해준다.</li>\n<li>asciidoctor Task로 생성한 <code class=\"language-text\">build/docs/asciidoc</code>파일을 <code class=\"language-text\">src/main/resources/static/docs</code>로 복사한다.</li>\n<li>bootJar 실행시 copyDocument를 먼저 실행하도록 한다.</li>\n</ol>\n<hr>\n<p>✅MockMvc를 사용한 Rest Docs 테스트 작성을 알아보기 전에 우선 MockMvc에 대해 알아보자.</p>\n<h2>MockMvc 기본 메서드</h2>\n<p>어떠한 것들이 있는지 알아보고 밑에서 자세히 알아보자.</p>\n<h3>perform()</h3>\n<p>가상의 request를 처리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/schedules/?year=2022&amp;month=7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>andExpert()</h3>\n<p>andExpert()</p>\n<p>예상값을 검증한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// status 값이 정상인 경우를 기대하고 만든 체이닝 메소드의 일부</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//contentType을 검증</span></code></pre></div>\n<h3>andDo()</h3>\n<p>요청에 대한 처리를 맡는다. print() 메소드가 일반적이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token function\">andDo</span><span class=\"token punctuation\">(</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>andReturn()</h3>\n<p>테스트한 결과 객체를 받을 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">MvcResult</span> result <span class=\"token operator\">=</span> mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">andDo</span><span class=\"token punctuation\">(</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">andReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>MockMvc 요청 만들기</h2>\n<p>요청을 만들 때는 static 메서드인 get, post, put, delete, fileUpload 등을 이용해서 MockHttpServletRequestBuilder 객체를 생성하는 것에서 시작한다.</p>\n<p>MockHttpServletRequestBuilder는 ServletRequest를 구성하기에 필요한 다양한 메서드를 제공한다.\n<img src=\"https://velog.velcdn.com/images/gudonghee2000/post/ee7412c0-3698-4e26-9ad2-ce826495d20e/image.JPG\">\n위 메서드들은 메서드 체이닝을 지원하기 때문에, 아래와 같이 요청 데이터를 연결해서 작성하면된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MockHttpServletRequestBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/schedules\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2022\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"month\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sessionId\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"세션아이디입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><em><strong>❗❗ 유의 할 점</strong></em>\nMockMvc.perform() 의 파라미터 값이 MockHttpServletRequestBuilder의 상위 객체이다.</p>\n<p>그래서 perform() 파라미터로 아래와 같이 넣어주어도 작동된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/schedules\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2022\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"month\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sessionId\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"세션아이디입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>MockMvc 실행 결과 검증</h2>\n<p>perform()은 반환 값으로 ResultActions가 반환된다.\nResultActions의 andExpect는 요청 실행 결과를 검증 하려면 ResultMatcher를 넘겨줘서 검증해야한다.\nResultMatcher는 다음의 MockMvcResultMatchers가 가지는 static 메서드를 통해서 얻는다.</p>\n<p>MockMvcResultMatchers는 다음의 static 메서드를 통해 다양한 ResultMatcher를 제공한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/gudonghee2000/post/f1d670a7-c355-4c1c-9d01-2d84ea6412b7/image.JPG\"></p>\n<p>아래의 예시를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\t<span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handlerType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScheduleController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">methodName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"save\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">forwardedUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringValues</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Language\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"저장이 잘되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>MockMvc 실행 결과 처리</h2>\n<p>실행 결과를 출력할 떄는 andDo 메서드를 사용한다.\nandDo 메서드 의 인수에는 실행 결과를 처리 할 수 있는 ResultHandler를 지정한다.\nMockMvcResultHandlers는 다양한 ResultHandler를 제공하지만 print()를 주로 사용한다.</p>\n<h2>MockMvc를 사용한 Rest Docs 생성</h2>\n<p>테스트 코드와 함께 MockMvc를 사용한 Rest Docs 생성을 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebMvcTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScheduleController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@AutoConfigureRestDocs</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduleControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ObjectMapper</span> objectMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@MockBean</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ScheduleService</span> scheduleService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">ScheduleCreateRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduleCreateRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"제목\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"메모\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span>scheduleService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n        <span class=\"token comment\">// when &amp; then</span>\n        mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/schedules\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andDo</span><span class=\"token punctuation\">(</span><span class=\"token function\">document</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"schedule-save\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 4</span>\n                        <span class=\"token function\">requestFields</span><span class=\"token punctuation\">(</span>\n                                <span class=\"token function\">fieldWithPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonFieldType</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"제목\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token function\">fieldWithPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"startDateTime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonFieldType</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">)</span>\n                                        <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2022-07-04T13:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token function\">fieldWithPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"endDateTime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonFieldType</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2022-07-05T07:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token function\">fieldWithPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonFieldType</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메모입니다.\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>target/generated-snippets dir 생성하고 테스트 코드를 통해 snippets를 추가해주는 애노테이션이다.</li>\n<li><code class=\"language-text\">ScheduleService</code>를 mocking을 하기위해서 <code class=\"language-text\">@MockBean</code> 을 선언한다.</li>\n<li>mocking을 통해 <code class=\"language-text\">ScheduleService</code> 를 통해 받을 응답값을 설정한다.</li>\n<li>test 수행시 <code class=\"language-text\">andDo(document(&quot;xxx&quot;))</code>를 통해서 <code class=\"language-text\">./build/generated-snippets</code> 하위에 문서가 작성된다.</li>\n</ol>\n<hr>\n<h2>끝내면서</h2>\n<p>이상 Rest Docs의 매커니즘, 설정 그리고 MockMvc를 활용한 Rest Docs 생성 방법을 살펴보았다.\n프로젝트에 RestAssuered를 사용한 Rest Docs를 적용하면서 테스트 격리에 문제를 경험하였는데,\n테스트 격리에 대해서 추후에 포스팅 해봐야겠다.</p>","frontmatter":{"title":"MockMvc를 사용한 Spring RestDocs","date":"July 07, 2022","update":"July 07, 2022","tags":["Spring","Rest API"],"series":null},"fields":{"slug":"/apply-rest-docs/","readingTime":{"minutes":4.685}}},"seriesList":{"edges":[{"node":{"id":"082241f5-a95e-596e-a6e5-3ddc8602e007","fields":{"slug":"/apply-rest-docs/"},"frontmatter":{"title":"MockMvc를 사용한 Spring RestDocs"}}},{"node":{"id":"1547ad5d-d560-50c7-8eb3-c4112d5666ab","fields":{"slug":"/appearance-background-of-jpa/"},"frontmatter":{"title":"JPA 등장배경"}}},{"node":{"id":"033a271f-a26c-53d6-8065-7b62495bf897","fields":{"slug":"/intellij-final-keyword/"},"frontmatter":{"title":"IntelliJ에서 메소드 추출한 메소드의 파라미터에 final 키워드 자동 추가하기"}}},{"node":{"id":"c42fd84c-0b8c-50d0-a3f9-84a608cb7e0d","fields":{"slug":"/git-branch-strategy/"},"frontmatter":{"title":"달록팀의 git 브랜치 전략을 소개합니다."}}},{"node":{"id":"170a6efb-2c64-58f4-9c54-c307d279a1fb","fields":{"slug":"/infinite-scroll/"},"frontmatter":{"title":"React에서 무한 스크롤 구현하기"}}},{"node":{"id":"c2b3cd35-2045-5e3d-a02b-3b2ff229c11d","fields":{"slug":"/package-structure/"},"frontmatter":{"title":"달록에 적절한 패키지 구조 고민하기"}}},{"node":{"id":"c25cf6cb-9f56-58b1-bb1a-7a96021a2078","fields":{"slug":"/data-jpa-slice-page/"},"frontmatter":{"title":"Spring Data JPA의 Slice & Page"}}},{"node":{"id":"ce017151-2154-5e38-ab34-e8830aec784b","fields":{"slug":"/data-jpa-auditing/"},"frontmatter":{"title":"Spring Data JPA의 Auditing"}}},{"node":{"id":"bda33ac6-a772-5d1b-9d7a-4fbd31d9dc87","fields":{"slug":"/separated-interface/"},"frontmatter":{"title":"외부와 의존성 분리하기"}}}]},"previous":null,"next":{"fields":{"slug":"/appearance-background-of-jpa/"},"frontmatter":{"title":"JPA 등장배경"}}},"pageContext":{"id":"082241f5-a95e-596e-a6e5-3ddc8602e007","series":null,"previousPostId":null,"nextPostId":"1547ad5d-d560-50c7-8eb3-c4112d5666ab"}},"staticQueryHashes":[]}